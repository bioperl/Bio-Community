# BioPerl module for Bio::Community::IO::qiime
#
# Please direct questions and support issues to <bioperl-l@bioperl.org>
#
# Copyright Florent Angly <florent.angly@gmail.com>
#
# You may distribute this module under the same terms as perl itself
#
# POD documentation - main docs before the code

=head1 NAME

Bio::Community::IO::qiime - Driver to read and write files in the QIIME format

=head1 SYNOPSIS

   my $in = Bio::Community::IO->new( -file => 'gaas_compo.txt', -format => 'qiime' );

   # See Bio::Community::IO for more information

=head1 DESCRIPTION

This Bio::Community::IO driver reads and writes files generated by QIIME
(L<http://qiime.org/>). Multiple communities can be recorded in a tab-delimited
file. Here is an example of QIIME file with OTU assigned to the GreenGenes taxonomy:

  # QIIME v1.3.0 OTU table
  #OTU ID	soil	marine	freshwater	Consensus Lineage
  0	3	11	0	k__Bacteria;p__Cyanobacteria;c__;o__Chroococcales;f__;g__Synechococcus;s__
  1	10	24	0	k__Bacteria;p__TM6;c__;o__;f__;g__;s__
  2	0	230	110	k__Bacteria;p__Cyanobacteria;c__;o__Oscillatoriales;f__;g__Trichodesmium;s__Trichodesmium erythraeum
  3	0	30	80	k__Bacteria;p__Acidobacteria;c__Solibacteres;o__Solibacterales;f__Solibacteraceae;g__Candidatus Solibacter;s__

Note that the column with the taxonomy assignment is optional.

=head1 CONSTRUCTOR

See L<Bio::Community::IO>.

=head1 FEEDBACK

=head2 Mailing Lists

User feedback is an integral part of the evolution of this
and other Bioperl modules. Send your comments and suggestions preferably
to one of the Bioperl mailing lists.

Your participation is much appreciated.

  bioperl-l@bioperl.org                  - General discussion
  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists

=head2 Support 

Please direct usage questions or support issues to the mailing list:

I<bioperl-l@bioperl.org>

rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.

=head2 Reporting Bugs

Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:

  http://bugzilla.open-bio.org/

=head1 AUTHOR - Florent Angly

Email florent.angly@gmail.com

=cut


package Bio::Community::IO::qiime;

use Moose;
use MooseX::Method::Signatures;
use namespace::autoclean;
use Bio::Community::Member;

extends 'Bio::Community::IO';
with 'Bio::Community::Role::IO',
     'Bio::Community::Role::Table';

#### sorting only effective for first community???
our $default_sort_members   =  0;      # unsorted
our $default_abundance_type = 'count'; # absolute count (positive integer)
our $default_missing_string =  0;      # empty members get a '0'


sub BUILDARGS {
   # Request the table to start at line 2 (first line is a comment line)
   my ($class, %args) = @_;
   $args{-start_line} = 2;
   return \%args;
};


has '_line' => (
   is => 'rw',
   isa => 'PositiveInt',
   required => 0,
   init_arg => undef,
   default => 1,
   lazy => 1,
);


has '_col' => (
   is => 'rw',
   isa => 'PositiveInt',
   required => 0,
   init_arg => undef,
   default => 1,
   lazy => 1,
);


has '_members' => (
   is => 'rw',
   isa => 'ArrayRef[Bio::Community::Member]',
   required => 0,
   init_arg => undef,
   default => sub { [] },
   lazy => 1,
   predicate => '_has_members',
);


has '_id2line' => (
   is => 'rw',
   isa => 'HashRef[String]',
   required => 0,
   init_arg => undef,
   default => sub { {} },
   lazy => 1,
);


method _generate_members {
   # Make members from the first column
   my @members;
   my $col = 1;
   my $line = 2; # first line of the table is a header

   ####
   print "GENERATING MEMBERS\n";
   use Data::Dumper; print Dumper($self);
   ####

   while (my $id = $self->_get_value($line, $col)) {

      ####
      print "ID: $id\n";
      ####

      my $desc = $self->_get_value($line, $self->_max_col);
      my $member = Bio::Community::Member->new( -id => $id, -desc => $desc );
      push @members, $member;
 
      ####
      #use Data::Dumper;
      #print Dumper($member);
      ####
 
      $line++;
   }
   $self->_members(\@members);
}


method next_member {
   my ($member, $count);
   my $line = $self->_line;
   while ( $line++ ) {
      # Get the abundance of the member (undef if out-of-bounds)
      $count = $self->_get_value($line, $self->_col);
      # No more members for this community.
      last if not defined $count;
      # Skip members with no abundance / abundance of 0
      next if not $count;
      # Get the member itself
      $member = $self->_members->[$line - 2];
      last;
   }
   $self->_line($line);
   return $member, $count;
}


method _next_community_init {
   # Go to start of next column and return name of new community. The first time,
   # generate all community members.
   if (not $self->_has_members) {
      $self->_generate_members();
   }
   $self->_col( $self->_col + 1 );
   $self->_line( 1 );
   my $name = $self->_get_value(1, $self->_col);
   return $name;
}


method _next_community_finish {
   return 1;
}


method write_member (Bio::Community::Member $member, Count $count) {
###    my $id   = $member->id;
###    my $line = $self->_id2line->{$id};
###    if (not defined $line) {
###        # This member has not been written previously for another community
###        $line = $self->_line;
###        $self->_set_value( $line, 1, $member->desc );
###        $self->_id2line->{$id} = $line;
###    }
###    $self->_set_value($line, $self->_col, $count);
###    $self->_line( $line + 1 );
    return 1;
}


method _write_community_init (Bio::Community $community) {
   # Write header for that community
###   my $line = 1;
###   my $col  = $self->_col + 1;
###   $self->_set_value($line, $col, $community->name);
###   $self->_line( $line + 1);
###   $self->_col( $col );
   return 1;
}


method _write_community_finish (Bio::Community $community) {
   return 1;
}



__PACKAGE__->meta->make_immutable;

1;
